#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
from pathlib import Path
import sys 

# Setup the argument parser

# We want the first argument to be the desired name of the extension (required)
# The second argument can specify the language, whether it is a morpho-based extension or a C based extension

parser = argparse.ArgumentParser(description='Extension boilerplate for the Morpho language')
parser.add_argument('name', help='Name of the desired extension (excluding "morpho-")', type=str)

# The language argument is optional, and defaults to morpho
parser.add_argument('--lang', help='Language of the extension (default: morpho)', default='morpho', type=str, choices=['morpho', 'c'])

# Parse the arguments
args = parser.parse_args()

# capture the arguments
EXT_NAME: str = args.name
lang: str = args.lang

# In either case, make a directory called "morpho-<EXT_NAME>"
Path(f"morpho-{EXT_NAME}").mkdir(parents=True)

# Create help
Path(f"morpho-{EXT_NAME}/share/help").mkdir(parents=True)

help_header = f"""
[comment]: # ({EXT_NAME.capitalize()} help)
[version]: # (0.6)

# {EXT_NAME.capitalize()}
[tag{EXT_NAME.capitalize()}]: # ({EXT_NAME.capitalize()})

"""

with open(f"morpho-{EXT_NAME}/share/help/{EXT_NAME}.md", "w") as help_file:
    help_file.write(help_header)

# Create a module file
Path(f"morpho-{EXT_NAME}/share/modules").mkdir(parents=True)

module_header = f"""
/* This initial empty file is automatically generated by the morpho-ext.py script.
This is where the morpho-based module files for this extension should be placed.
They can all be imported by calling `import <filename> once the extension is installed, even if the filenames are not the same as the extension name.
*/
"""

with open(f"morpho-{EXT_NAME}/share/modules/{EXT_NAME}.morpho", "w") as module_file:
    module_file.write(module_header)

# Create a test file

Path(f"morpho-{EXT_NAME}/test").mkdir(parents=True)

test_header = f"""
/* This initial empty file is automatically generated by the morpho-ext.py script.
This folder is where the tests for this extension should be placed.
*/
"""

with open(f"morpho-{EXT_NAME}/test/{EXT_NAME}_test.morpho", "w") as test_file:
    test_file.write(test_header)

# Create an example file

Path(f"morpho-{EXT_NAME}/examples").mkdir(parents=True)

example_header = f"""
/* This initial empty file is automatically generated by the morpho-ext.py script.
This folder is where the examples for this extension should be placed.
*/
"""

with open(f"morpho-{EXT_NAME}/examples/{EXT_NAME}_example.morpho", "w") as example_file:
    example_file.write(example_header)

# Create a README file

readme_header = f"""
# morpho-{EXT_NAME} Extension

This is the README file for the morpho-{EXT_NAME} extension.

"""

with open(f"morpho-{EXT_NAME}/README.md", "w") as readme_file:
    readme_file.write(readme_header)

# Now, if the extension is C based, we need to add C source files and Cmake files
    
if lang == "morpho": # If the extension is morpho-based, we are done
    sys.exit()

# Otherwise, we need to create the C files
    
c_boilerplate = f"""
// {EXT_NAME}.c
#include <stdio.h>
#include <morpho/morpho.h>
#include <morpho/builtin.h>
#include "{EXT_NAME}.h"

// C-based functions defined for this module go here

// Then, the Morpho veneer functions for the C functions can be defined here

// These are necessary functions to interface with the morpho extension manager
void {EXT_NAME}_initialize(void) {{
    // Add builtin functions, define errors, etc
}}

void {EXT_NAME}_finalize(void) {{
    // Optional cleanup function
}}
""" 
# Create the src directory
Path(f"morpho-{EXT_NAME}/src").mkdir(parents=True)

# Create the C file
with open(f"morpho-{EXT_NAME}/src/{EXT_NAME}.c", "w") as c_file:
    c_file.write(c_boilerplate)

# Create the header file
    
h_boilerplate = f"""
// {EXT_NAME}.h
#include <stdio.h>
#include <morpho/morpho.h>
#include <morpho/builtin.h>

// Add #define statements for error messages here

// Add #define for method names here

// Add function prototypes here

"""

with open(f"morpho-{EXT_NAME}/src/{EXT_NAME}.h", "w") as h_file:
    h_file.write(h_boilerplate)

# Create the CMakeLists.txt file, first, in the src directory

src_cmake = f"""
target_sources({EXT_NAME}
    PRIVATE
        {EXT_NAME}.c   {EXT_NAME}.h  
)
"""

with open(f"morpho-{EXT_NAME}/src/CMakeLists.txt", "w") as src_cmake_file:
    src_cmake_file.write(src_cmake)

# Now, create the CMakeLists.txt file in the root directory

root_cmake = f"""
cmake_minimum_required(VERSION 3.13)
project(morpho-{EXT_NAME})

set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

# Build the library as a plugin
add_library({EXT_NAME} MODULE "") 

# Suppress 'lib' prefix
set_target_properties({EXT_NAME} PROPERTIES PREFIX "")

# Add sources
add_subdirectory(src)

# Locate the morpho.h header file and store in MORPHO_HEADER
find_file(MORPHO_HEADER
          morpho.h 
          HINTS 
          /usr/local/opt/morpho
          /opt/homebrew/opt/morpho
          /usr/local/include/morpho
          )

# Identify folder that morpho.h is located in from MORPHO_HEADER and store in MORPHO_INCLUDE
get_filename_component(MORPHO_INCLUDE ${{MORPHO_HEADER}} DIRECTORY)

# Add morpho headers to MORPHO_INCLUDE
target_include_directories({EXT_NAME} PUBLIC ${{MORPHO_INCLUDE}})

# Add general header search paths
target_include_directories({EXT_NAME} PUBLIC /usr/local/include)

# Add morpho headers in subfolders to MORPHO_INCLUDE
file(GLOB morpho_subdirectories LIST_DIRECTORIES true ${{MORPHO_INCLUDE}}/*)
foreach(dir ${{morpho_subdirectories}})
    IF(IS_DIRECTORY ${dir})
        target_include_directories({EXT_NAME} PUBLIC ${{dir}})
    ELSE()
        CONTINUE()
    ENDIF()
endforeach()

# Locate libmorpho
find_library(MORPHO_LIBRARY
    NAMES morpho libmorpho
)

target_link_libraries({EXT_NAME} ${{MORPHO_LIBRARY}})

set(CMAKE_INSTALL_PREFIX ..)

# Install the resulting binary
install(TARGETS {EXT_NAME} LIBRARY DESTINATION lib/)

"""

with open(f"morpho-{EXT_NAME}/CMakeLists.txt", "w") as root_cmake_file:
    root_cmake_file.write(root_cmake)

# Add a .gitignore file that ignores the build directory

gitignore = f"""
*.so
*.dylib
"""

with open(f"morpho-{EXT_NAME}/.gitignore", "w") as gitignore_file:
    gitignore_file.write(gitignore)

# Create the lib directory where the .so file will be installed
Path(f"morpho-{EXT_NAME}/lib").mkdir(parents=True)

# Add a gitignore inside the lib directory to ignore everything in there except the gitignore file itself. This will make the lib directory empty when the extension is cloned.

lib_gitignore = f"""
*
!.gitignore
"""

with open(f"morpho-{EXT_NAME}/lib/.gitignore", "w") as lib_gitignore_file:
    lib_gitignore_file.write(lib_gitignore)
    
# All done!
    